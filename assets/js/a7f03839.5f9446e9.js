"use strict";(self.webpackChunkunmanic_documentation=self.webpackChunkunmanic_documentation||[]).push([[8662],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(t),m=i,v=p["".concat(s,".").concat(m)]||p[m]||d[m]||a;return t?r.createElement(v,o(o({ref:n},u),{},{components:t})):r.createElement(v,o({ref:n},u))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=p;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var c=2;c<a;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},8215:function(e,n,t){t.d(n,{Z:function(){return i}});var r=t(7294);function i(e){var n=e.children,t=e.hidden,i=e.className;return r.createElement("div",{role:"tabpanel",hidden:t,className:i},n)}},9877:function(e,n,t){t.d(n,{Z:function(){return u}});var r=t(7462),i=t(7294),a=t(2389),o=t(5979),l=t(6010),s="tabItem_LplD";function c(e){var n,t,a,c=e.lazy,u=e.block,d=e.defaultValue,p=e.values,m=e.groupId,v=e.className,h=i.Children.map(e.children,(function(e){if((0,i.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),f=null!=p?p:h.map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes}})),g=(0,o.lx)(f,(function(e,n){return e.value===n.value}));if(g.length>0)throw new Error('Docusaurus error: Duplicate values "'+g.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var k=null===d?d:null!=(n=null!=d?d:null==(t=h.find((function(e){return e.props.default})))?void 0:t.props.value)?n:null==(a=h[0])?void 0:a.props.value;if(null!==k&&!f.some((function(e){return e.value===k})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+k+'" but none of its children has the corresponding value. Available values are: '+f.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var I=(0,o.UB)(),N=I.tabGroupChoices,y=I.setTabGroupChoices,b=(0,i.useState)(k),D=b[0],w=b[1],_=[],E=(0,o.o5)().blockElementScrollPositionUntilNextRender;if(null!=m){var C=N[m];null!=C&&C!==D&&f.some((function(e){return e.value===C}))&&w(C)}var V=function(e){var n=e.currentTarget,t=_.indexOf(n),r=f[t].value;r!==D&&(E(n),w(r),null!=m&&y(m,r))},A=function(e){var n,t=null;switch(e.key){case"ArrowRight":var r=_.indexOf(e.currentTarget)+1;t=_[r]||_[0];break;case"ArrowLeft":var i=_.indexOf(e.currentTarget)-1;t=_[i]||_[_.length-1]}null==(n=t)||n.focus()};return i.createElement("div",{className:"tabs-container"},i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":u},v)},f.map((function(e){var n=e.value,t=e.label,a=e.attributes;return i.createElement("li",(0,r.Z)({role:"tab",tabIndex:D===n?0:-1,"aria-selected":D===n,key:n,ref:function(e){return _.push(e)},onKeyDown:A,onFocus:V,onClick:V},a,{className:(0,l.Z)("tabs__item",s,null==a?void 0:a.className,{"tabs__item--active":D===n})}),null!=t?t:n)}))),c?(0,i.cloneElement)(h.filter((function(e){return e.props.value===D}))[0],{className:"margin-vert--md"}):i.createElement("div",{className:"margin-vert--md"},h.map((function(e,n){return(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==D})}))))}function u(e){var n=(0,a.Z)();return i.createElement(c,(0,r.Z)({key:String(n)},e))}},4954:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return u},default:function(){return h},frontMatter:function(){return c},metadata:function(){return d},toc:function(){return m}});var r=t(7462),i=t(3366),a=(t(7294),t(3905)),o=t(9877),l=t(8215),s=["components"],c={title:"NVIDIA Hardware Acceleration on Linux",description:"NVIDIA Hardware Acceleration on Linux",id:"nvidia_support_unmanic_on_linux"},u=void 0,d={unversionedId:"guides/nvidia_support_unmanic_on_linux",id:"guides/nvidia_support_unmanic_on_linux",title:"NVIDIA Hardware Acceleration on Linux",description:"NVIDIA Hardware Acceleration on Linux",source:"@site/docs/guides/nvidia_support_unmanic_on_linux.md",sourceDirName:"guides",slug:"/guides/nvidia_support_unmanic_on_linux",permalink:"/docs/guides/nvidia_support_unmanic_on_linux",tags:[],version:"current",frontMatter:{title:"NVIDIA Hardware Acceleration on Linux",description:"NVIDIA Hardware Acceleration on Linux",id:"nvidia_support_unmanic_on_linux"},sidebar:"docs",previous:{title:"Linking Unmanic Installations",permalink:"/docs/guides/unmanic_link_installations"},next:{title:"Running a FileBot Post-processor",permalink:"/docs/guides/filebot_post_processor"}},p={},m=[{value:"Instructions:",id:"instructions",level:2},{value:"1) Check GPU Support",id:"1-check-gpu-support",level:3},{value:"2) Install GPU Driver",id:"2-install-gpu-driver",level:3},{value:"3) FFmpeg installation with NVENC support",id:"3-ffmpeg-installation-with-nvenc-support",level:3},{value:"4) Running in Docker with NVENC support",id:"4-running-in-docker-with-nvenc-support",level:3},{value:"Installing the NVIDIA Container Toolkit",id:"installing-the-nvidia-container-toolkit",level:4},{value:"Creating the Docker container",id:"creating-the-docker-container",level:4}],v={toc:m};function h(e){var n=e.components,t=(0,i.Z)(e,s);return(0,a.kt)("wrapper",(0,r.Z)({},v,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://img.shields.io/badge/Difficulty-easy-green?style=flat",alt:"Difficulty"}),"\n",(0,a.kt)("img",{parentName:"p",src:"https://img.shields.io/badge/Setup%20Time-5%20minutes-green?style=flat",alt:"Setup Time"})),(0,a.kt)("p",null,"A number of plugins for Unmanic support hardware acceleration that utilise an NVIDIA GPU. This includes hardware acceleration (HWA) of video decoding/encoding in tools like FFmpeg or HandBrake CLI using the NVIDIA NVDEC/NVENC decoder/encoder."),(0,a.kt)("p",null,"Follow these instructions to configure the Unmanic Docker container for running FileBot as a Post-processor function."),(0,a.kt)("h2",{id:"instructions"},"Instructions:"),(0,a.kt)("h3",{id:"1-check-gpu-support"},"1) Check GPU Support"),(0,a.kt)("p",null,"You can find an official list of NVIDIA Graphics Cards and their supported codecs ",(0,a.kt)("a",{parentName:"p",href:"https://developer.nvidia.com/video-encode-and-decode-gpu-support-matrix-new"},"Here"),"."),(0,a.kt)("p",null,"Check that your GPU is listed and is capable of doing what you want it to."),(0,a.kt)("h3",{id:"2-install-gpu-driver"},"2) Install GPU Driver"),(0,a.kt)("p",null,"Ensure you have installed the NVIDIA drivers."),(0,a.kt)("p",null,"This is required even if you intend to run Unmanic within a Docker container."),(0,a.kt)("p",null,"You can download the latest NVIDIA GPU driver from ",(0,a.kt)("a",{parentName:"p",href:"https://www.nvidia.com/Download/driverResults.aspx/187162/en-us"},"here"),"."),(0,a.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"The minimum required NVIDIA driver version is 418.30 for this to work in Linux."))),(0,a.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"It is recommended to also patch drivers the drivers by following the instructions ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/keylase/nvidia-patch"},"here"),". This project will remove the restriction on maximum number of simultaneous NVENC video encoding sessions imposed by Nvidia to consumer-grade GPUs."))),(0,a.kt)("h3",{id:"3-ffmpeg-installation-with-nvenc-support"},"3) FFmpeg installation with NVENC support"),(0,a.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"Only worry about this if you are running Unmanic natively on Linux.\nThe Docker image has FFmpeg pre-installed with support for NVENC/NVDEC"))),(0,a.kt)("p",null,"Install FFmpeg for your operating system."),(0,a.kt)("p",null,"It is recommend to use the ",(0,a.kt)("a",{parentName:"p",href:"https://jellyfin.org/docs/general/administration/installing.html#ffmpeg-installation"},"Jellyfin FFmpeg builds"),", however any recent release of FFmpeg will work fine."),(0,a.kt)("p",null,"To ensure your FFmpeg installation is capable of running the NVENC encoders, run this command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'for i in encoders decoders filters; do echo $i:; ffmpeg -hide_banner -${i} | egrep -i "npp|cuvid|nvenc|cuda|nvdec"; done\n')),(0,a.kt)("p",null,"You should see a list of available encoders and decoders."),(0,a.kt)("h3",{id:"4-running-in-docker-with-nvenc-support"},"4) Running in Docker with NVENC support"),(0,a.kt)("h4",{id:"installing-the-nvidia-container-toolkit"},"Installing the NVIDIA Container Toolkit"),(0,a.kt)("p",null,"If you intend to use Unmanic inside a Docker container, you will also need to pass through the required devices to the container.\nWith NVIDIA this is done by installing the ",(0,a.kt)("a",{parentName:"p",href:"https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html#docker"},"nvidia-docker2")," package\non your host."),(0,a.kt)("p",null,"Once you have followed these steps, you can test that the Unmanic Docker container can use the NVENC hardware by running:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'docker run --rm --gpus all --entrypoint="" josh5/unmanic nvidia-smi\n')),(0,a.kt)("p",null,"You should see the following output:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Sun Apr 17 05:31:44 2022       \n+-----------------------------------------------------------------------------+\n| NVIDIA-SMI 510.54       Driver Version: 510.54       CUDA Version: 11.6     |\n|-------------------------------+----------------------+----------------------+\n| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n|                               |                      |               MIG M. |\n|===============================+======================+======================|\n|   0  NVIDIA GeForce ...  Off  | 00000000:01:00.0  On |                  N/A |\n|  0%   34C    P8    N/A / 120W |    185MiB /  4096MiB |      0%      Default |\n|                               |                      |                  N/A |\n+-------------------------------+----------------------+----------------------+\n                                                                               \n+-----------------------------------------------------------------------------+\n| Processes:                                                                  |\n|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\n|        ID   ID                                                   Usage      |\n|=============================================================================|\n|  No running processes found                                                 |\n+-----------------------------------------------------------------------------+\n")),(0,a.kt)("h4",{id:"creating-the-docker-container"},"Creating the Docker container"),(0,a.kt)(o.Z,{defaultValue:"docker_run",values:[{label:"Docker run",value:"docker_run"},{label:"Docker-compose",value:"docker_compose"}],mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"docker_run",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"  PUID=$(id -u)\n  PGID=$(id -g)\n\n  # CONFIG_DIR - Where you settings are saved\n  CONFIG_DIR=/config\n\n  # LIBRARY_DIR - The location/locations of your library\n  LIBRARY_DIR=/library\n\n  # CACHE_DIR - A tmpfs or and folder for temporary conversion files\n  CACHE_DIR=/tmp/unmanic\n  \n  # NVIDIA_VISIBLE_DEVICES - The GPUs that will be accessible to the container\n  NVIDIA_VISIBLE_DEVICES=all\n\n  docker run -ti --rm \\\n      -e PUID=${PUID} \\\n      -e PGID=${PGID} \\\n      -e NVIDIA_VISIBLE_DEVICES=${NVIDIA_VISIBLE_DEVICES} \\\n      --runtime=nvidia \\\n      -p 8888:8888 \\\n      -v ${CONFIG_DIR}:/config \\\n      -v ${LIBRARY_DIR}:/library \\\n      -v ${CACHE_DIR}:/tmp/unmanic \\\n      josh5/unmanic:latest\n"))),(0,a.kt)(l.Z,{value:"docker_compose",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"  # Variables that will need to be changed:\n  #     <PUID>                            -  User id for folder/file permissions\n  #     <PGID>                            -  Group id for folder/file permissions\n  #     <NVIDIA_VISIBLE_DEVICES>          -  The GPUs that will be accessible to the container\n  #                                          Options: https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/user-guide.html#gpu-enumeration\n  #     <PATH_TO_CONFIG>                  -  Path where Unmanic will store config files\n  #     <PATH_TO_LIBRARY>                 -  Path where you store the files that Unmanic will scan\n  #     <PATH_TO_ENCODE_CACHE>            -  Cache path for in-progress encoding tasks\n  #\n\n  ---\n  version: '2.4'\n  services:\n    unmanic:\n      container_name: unmanic\n      image: josh5/unmanic:latest\n      ports:\n        - 8888:8888\n      environment:\n        - PUID=<PUID>\n        - PGID=<PGID>\n        - NVIDIA_VISIBLE_DEVICES=<NVIDIA_VISIBLE_DEVICES>\n      volumes:\n        - <PATH_TO_CONFIG>:/config\n        - <PATH_TO_LIBRARY>:/library\n        - <PATH_TO_ENCODE_CACHE>:/tmp/unmanic\n      runtime: nvidia       # For H/W transcoding using the NVENC encoder\n")))))}h.isMDXComponent=!0}}]);