"use strict";(self.webpackChunkunmanic_documentation=self.webpackChunkunmanic_documentation||[]).push([[7936],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>f});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=l(t),p=o,f=m["".concat(c,".").concat(p)]||m[p]||d[p]||a;return t?r.createElement(f,s(s({ref:n},u),{},{components:t})):r.createElement(f,s({ref:n},u))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,s=new Array(a);s[0]=p;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i[m]="string"==typeof e?e:o,s[1]=i;for(var l=2;l<a;l++)s[l]=t[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},5162:(e,n,t)=>{t.d(n,{Z:()=>s});var r=t(7294),o=t(6010);const a="tabItem_Ymn6";function s(e){let{children:n,hidden:t,className:s}=e;return r.createElement("div",{role:"tabpanel",className:(0,o.Z)(a,s),hidden:t},n)}},5488:(e,n,t)=>{t.d(n,{Z:()=>p});var r=t(7462),o=t(7294),a=t(6010),s=t(2389),i=t(7392),c=t(7094),l=t(2466);const u="tabList__CuJ",m="tabItem_LNqP";function d(e){const{lazy:n,block:t,defaultValue:s,values:d,groupId:p,className:f}=e,v=o.Children.map(e.children,(e=>{if((0,o.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),b=d??v.map((e=>{let{props:{value:n,label:t,attributes:r}}=e;return{value:n,label:t,attributes:r}})),_=(0,i.l)(b,((e,n)=>e.value===n.value));if(_.length>0)throw new Error(`Docusaurus error: Duplicate values "${_.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const h=null===s?s:s??v.find((e=>e.props.default))?.props.value??v[0].props.value;if(null!==h&&!b.some((e=>e.value===h)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${h}" but none of its children has the corresponding value. Available values are: ${b.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:y,setTabGroupChoices:I}=(0,c.U)(),[k,g]=(0,o.useState)(h),O=[],{blockElementScrollPositionUntilNextRender:D}=(0,l.o5)();if(null!=p){const e=y[p];null!=e&&e!==k&&b.some((n=>n.value===e))&&g(e)}const P=e=>{const n=e.currentTarget,t=O.indexOf(n),r=b[t].value;r!==k&&(D(n),g(r),null!=p&&I(p,String(r)))},E=e=>{let n=null;switch(e.key){case"Enter":P(e);break;case"ArrowRight":{const t=O.indexOf(e.currentTarget)+1;n=O[t]??O[0];break}case"ArrowLeft":{const t=O.indexOf(e.currentTarget)-1;n=O[t]??O[O.length-1];break}}n?.focus()};return o.createElement("div",{className:(0,a.Z)("tabs-container",u)},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":t},f)},b.map((e=>{let{value:n,label:t,attributes:s}=e;return o.createElement("li",(0,r.Z)({role:"tab",tabIndex:k===n?0:-1,"aria-selected":k===n,key:n,ref:e=>O.push(e),onKeyDown:E,onClick:P},s,{className:(0,a.Z)("tabs__item",m,s?.className,{"tabs__item--active":k===n})}),t??n)}))),n?(0,o.cloneElement)(v.filter((e=>e.props.value===k))[0],{className:"margin-top--md"}):o.createElement("div",{className:"margin-top--md"},v.map(((e,n)=>(0,o.cloneElement)(e,{key:n,hidden:e.props.value!==k})))))}function p(e){const n=(0,s.Z)();return o.createElement(d,(0,r.Z)({key:String(n)},e))}},234:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>c,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>m});var r=t(7462),o=(t(7294),t(3905)),a=t(5488),s=t(5162);const i={title:"Docker-Compose SMB/CIFS mounts",description:"Unmanic Installation - Docker-Compose with CIFS mounts",id:"docker_compose_cifs_mounts"},c=void 0,l={unversionedId:"advanced/docker_compose_cifs_mounts",id:"advanced/docker_compose_cifs_mounts",title:"Docker-Compose SMB/CIFS mounts",description:"Unmanic Installation - Docker-Compose with CIFS mounts",source:"@site/docs/advanced/docker_compose_cifs_mounts.mdx",sourceDirName:"advanced",slug:"/advanced/docker_compose_cifs_mounts",permalink:"/docs/advanced/docker_compose_cifs_mounts",draft:!1,tags:[],version:"current",frontMatter:{title:"Docker-Compose SMB/CIFS mounts",description:"Unmanic Installation - Docker-Compose with CIFS mounts",id:"docker_compose_cifs_mounts"},sidebar:"docs",previous:{title:"Docker Hardware Acceleration - VAAPI",permalink:"/docs/advanced/hardware_accelerated_encoding_vaapi"},next:{title:"Install Unmanic - Windows 10 (WSL + Docker)",permalink:"/docs/guides/unmanic_windows_install"}},u={},m=[{value:"Overview",id:"overview",level:2}],d={toc:m};function p(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"overview"},"Overview"),(0,o.kt)("p",null,"Mounting a remote Windows share is possible with Docker, but requires a little more configuration."),(0,o.kt)(a.Z,{defaultValue:"docker_run",values:[{label:"Docker run",value:"docker_run"},{label:"Docker-compose",value:"docker_compose"}],mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"docker_run",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"  PUID=$(id -u)\n  PGID=$(id -g)\n\n  # CONFIG_DIR - Where you settings are saved\n  CONFIG_DIR=/config\n\n  # CACHE_DIR - A tmpfs or and folder for temporary conversion files\n  CACHE_DIR=/tmp/unmanic\n  \n  # CIFS Mount params\n  REMOTE_IP=192.168.0.20\n  PATH_TO_LIBRARY=/library\n  USERNAME=user\n  PASSWORD=password\n\n  # First create the docker volume mounting the CIFS remote share\n  docker volume create \\\n      --driver local \\\n      --opt type=cifs \\\n      --opt device=//${REMOTE_IP}${PATH_TO_LIBRARY} \\\n      --opt o=username=${USERNAME},password=${PASSWORD},vers=3.0,uid=${PUID},gid=${PGID} \\\n      --name cifs_mount\n\n  # Now create the docker container using the created CIFS volume\n  docker run -ti --rm \\\n      -e PUID=${PUID} \\\n      -e PGID=${PGID} \\\n      -p 8888:8888 \\\n      -v ${CONFIG_DIR}:/config \\\n      -v cifs_mount:/library \\\n      -v ${CACHE_DIR}:/tmp/unmanic \\\n      josh5/unmanic:latest\n"))),(0,o.kt)(s.Z,{value:"docker_compose",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"  # Variables that will need to be changed:\n  #     <PUID>                            -  User id for folder/file permissions\n  #     <PGID>                            -  Group id for folder/file permissions\n  #     <PATH_TO_CONFIG>                  -  Path where Unmanic will store config files\n  #     <PATH_TO_ENCODE_CACHE>            -  Cache path for in-progress encoding tasks\n  #     <REMOTE_IP>                       -  Remote IP address of CIFS mount\n  #     <PATH_TO_LIBRARY>                 -  Path in remote machine to be mounted as your library \n  #     <USERNAME>                        -  Remote mount username\n  #     <PASSWORD>                        -  Remote mount password\n  #\n\n  ---\n  version: '2.4'\n  services:\n    unmanic:\n      container_name: unmanic\n      image: josh5/unmanic:latest\n      ports:\n        - 8888:8888\n      environment:\n        - PUID=<PUID>\n        - PGID=<PGID>\n      volumes:\n        - <PATH_TO_CONFIG>:/config\n        - cifs_mount:/library\n        - <PATH_TO_ENCODE_CACHE>:/tmp/unmanic\n\n  volumes:\n    cifs_mount:\n      driver: local\n      driver_opts:\n        type: cifs    \n        device: //<REMOTE_IP>/<PATH_TO_LIBRARY>\n        o: \"username=<USERNAME>,password=<PASSWORD>,vers=3.0,uid=<PUID>,gid=<PGID>\"\n\n\n")))))}p.isMDXComponent=!0}}]);