"use strict";(self.webpackChunkunmanic_documentation=self.webpackChunkunmanic_documentation||[]).push([[4183],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=i.createContext({}),u=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return i.createElement(l.Provider,{value:t},e.children)},_="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),_=u(n),m=r,d=_["".concat(l,".").concat(m)]||_[m]||p[m]||a;return n?i.createElement(d,o(o({ref:t},c),{},{components:n})):i.createElement(d,o({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[_]="string"==typeof e?e:r,o[1]=s;for(var u=2;u<a;u++)o[u]=n[u];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>o});var i=n(7294),r=n(6010);const a="tabItem_Ymn6";function o(e){let{children:t,hidden:n,className:o}=e;return i.createElement("div",{role:"tabpanel",className:(0,r.Z)(a,o),hidden:n},t)}},5488:(e,t,n)=>{n.d(t,{Z:()=>m});var i=n(7462),r=n(7294),a=n(6010),o=n(2389),s=n(7392),l=n(7094),u=n(2466);const c="tabList__CuJ",_="tabItem_LNqP";function p(e){const{lazy:t,block:n,defaultValue:o,values:p,groupId:m,className:d}=e,f=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),h=p??f.map((e=>{let{props:{value:t,label:n,attributes:i}}=e;return{value:t,label:n,attributes:i}})),g=(0,s.l)(h,((e,t)=>e.value===t.value));if(g.length>0)throw new Error(`Docusaurus error: Duplicate values "${g.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const b=null===o?o:o??f.find((e=>e.props.default))?.props.value??f[0].props.value;if(null!==b&&!h.some((e=>e.value===b)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${b}" but none of its children has the corresponding value. Available values are: ${h.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:$,setTabGroupChoices:y}=(0,l.U)(),[v,O]=(0,r.useState)(b),w=[],{blockElementScrollPositionUntilNextRender:k}=(0,u.o5)();if(null!=m){const e=$[m];null!=e&&e!==v&&h.some((t=>t.value===e))&&O(e)}const x=e=>{const t=e.currentTarget,n=w.indexOf(t),i=h[n].value;i!==v&&(k(t),O(i),null!=m&&y(m,String(i)))},S=e=>{let t=null;switch(e.key){case"Enter":x(e);break;case"ArrowRight":{const n=w.indexOf(e.currentTarget)+1;t=w[n]??w[0];break}case"ArrowLeft":{const n=w.indexOf(e.currentTarget)-1;t=w[n]??w[w.length-1];break}}t?.focus()};return r.createElement("div",{className:(0,a.Z)("tabs-container",c)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":n},d)},h.map((e=>{let{value:t,label:n,attributes:o}=e;return r.createElement("li",(0,i.Z)({role:"tab",tabIndex:v===t?0:-1,"aria-selected":v===t,key:t,ref:e=>w.push(e),onKeyDown:S,onClick:x},o,{className:(0,a.Z)("tabs__item",_,o?.className,{"tabs__item--active":v===t})}),n??t)}))),t?(0,r.cloneElement)(f.filter((e=>e.props.value===v))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},f.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==v})))))}function m(e){const t=(0,o.Z)();return r.createElement(p,(0,i.Z)({key:String(t)},e))}},5001:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>u,toc:()=>_});var i=n(7462),r=(n(7294),n(3905)),a=n(5488),o=n(5162);const s={title:"Subtitle Stripping",description:"Strip subtitle streams out of video files",id:"script_subtitle_stripping"},l=void 0,u={unversionedId:"guides/script_subtitle_stripping",id:"guides/script_subtitle_stripping",title:"Subtitle Stripping",description:"Strip subtitle streams out of video files",source:"@site/docs/guides/plugin_strip_subs.mdx",sourceDirName:"guides",slug:"/guides/script_subtitle_stripping",permalink:"/docs/guides/script_subtitle_stripping",draft:!1,tags:[],version:"current",frontMatter:{title:"Subtitle Stripping",description:"Strip subtitle streams out of video files",id:"script_subtitle_stripping"},sidebar:"docs",previous:{title:"Running a FileBot Post-processor",permalink:"/docs/guides/filebot_post_processor"}},c={},_=[{value:"Instructions:",id:"instructions",level:2},{value:"Execution Type:",id:"execution-type",level:4},{value:"Script:",id:"script",level:4},{value:"Arguments:",id:"arguments",level:4}],p={toc:_};function m(e){let{components:t,...s}=e;return(0,r.kt)("wrapper",(0,i.Z)({},p,s,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://img.shields.io/badge/Difficulty-easy-green?style=flat",alt:"Difficulty"}),"\n",(0,r.kt)("img",{parentName:"p",src:"https://img.shields.io/badge/Setup%20Time-5%20minutes-green?style=flat",alt:"Setup Time"}),"\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/josh5"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/badge/Original%20Author-josh5-lightgrey?style=flat?style=plastic&logo=github",alt:"Original Author"}))),(0,r.kt)("p",null,"Stripping subtitle streams is really simple. This guide will add a simple script that will strip subtitle streams from your file.\nOptionally, you will have the ability to specify a number of streams that you wish to keep."),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Currently, this setup does not container a library scan file test runner.\nTherefore, it will not process files without another plugin in the library's\nplugin flow to test that the scanned files need to be processed.")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Compliment this configuration with the plugin ",(0,r.kt)("strong",{parentName:"p"},"Re-order subtitle streams by language"),"."),(0,r.kt)("p",{parentName:"admonition"},"You can re-order your subtitle streams to have a particular language first,\nthen use this process to strip out all the ones remaining.")),(0,r.kt)("h2",{id:"instructions"},"Instructions:"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Once installed, you can configure the script by editing the top section:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre"},"###################################################################\n# CONFIG:\n# NUMBER_OF_SUB_STREAMS_TO_KEEP\n#   Specify the number of subtitle streams to keep.\n#   Script will preserve the number of subtitle streams specified \n#     in this value. All others will be stripped out.\n#   Set this value to 0 to remove all subtitle streams.\nNUMBER_OF_SUB_STREAMS_TO_KEEP=1\n###################################################################\n"))),(0,r.kt)(a.Z,{defaultValue:"manual_config",values:[{label:"Manual Config",value:"manual_config"},{label:"Unmanic Library Import",value:"library_import"}],mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"library_import",mdxType:"TabItem"},"Import this via the Unmanic library config importer.",(0,r.kt)("img",{className:"screenshot",style:{width:"400px"},src:n(2209).Z}),(0,r.kt)("p",null,"  Once imported, modify the library to suit your needs."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "plugins": {\n      "enabled_plugins": [\n      {\n          "plugin_id": "processor_script",\n          "has_config": true,\n          "settings": {\n          "input_type": "bash",\n          "script": "#!/usr/bin/env bash\\n###\\n# File: strip-subs.sh\\n# Project: tmp.BXJ7lwK6lZ\\n# File Created: Friday, 14th October 2022 5:35:18 am\\n# Author: Josh Sunnex (jsunnex@gmail.com)\\n# -----\\n# Last Modified: Friday, 14th October 2022 7:17:32 am\\n# Modified By: Josh Sunnex (jsunnex@gmail.com)\\n###\\n\\n###################################################################\\n# CONFIG:\\n# NUMBER_OF_SUB_STREAMS_TO_KEEP\\n#   Specify the number of subtitle streams to keep.\\n#   Script will preserve the number of subtitle streams specified \\n#     in this value. All others will be stripped out.\\n#   Set this value to 0 to remove all subtitle streams.\\nNUMBER_OF_SUB_STREAMS_TO_KEEP=3\\n###################################################################\\n\\n# Parse Args\\n__library_id=\\"\\"\\n__output_cache_file=\\"\\"\\n__original_source_file=\\"\\"\\n__original_source_size=\\"\\"\\n__source_file=\\"\\"\\n__source_size=\\"\\"\\n__return_data_file=\\"\\"\\n__positional_args=()\\nfor i in \\"${@}\\"; do\\n  case $i in\\n    --library-id=*)\\n      __library_id=\\"${i#*=}\\"\\n      shift # past argument=value\\n      ;;\\n    --output-cache-file=*)\\n      __output_cache_file=\\"${i#*=}\\"\\n      shift # past argument=value\\n      ;;\\n    --original-source-file=*)\\n      __original_source_file=\\"${i#*=}\\"\\n      shift # past argument=value\\n      ;;\\n    --original-source-size=*)\\n      __original_source_size=\\"${i#*=}\\"\\n      shift # past argument=value\\n      ;;\\n    -s=*|--source-file=*)\\n      __source_file=\\"${i#*=}\\"\\n      shift # past argument=value\\n      ;;\\n    --source-size=*)\\n      __source_size=\\"${i#*=}\\"\\n      shift # past argument=value\\n      ;;\\n    --return-data-file=*)\\n      __return_data_file=\\"${i#*=}\\"\\n      shift # past argument=value\\n      ;;\\n    -*|--*)\\n      echo \\"Unknown option $i\\"\\n      exit 1\\n      ;;\\n    *)\\n      __positional_args+=(\\"$1\\") # save positional arg\\n      shift # past argument\\n      ;;\\n  esac\\ndone\\nset -- \\"${__positional_args[@]}\\" # restore positional parameters\\n\\n# Helper functions\\n__jq_item() {\\n    echo \\"${1}\\" | base64 --decode | jq -r \\"${2}\\"\\n}\\n\\n# Generate ffmpeg command\\necho\\necho \\"Probing file \'${__source_file}\'...\\"\\nprobe=$(ffprobe -show_format -show_streams -print_format json -loglevel quiet \\"${__source_file}\\")\\nif [[ $? -gt 0 ]]; then\\n    # Probably not a video file\\n    echo \\"Unable to probe file. This is probably not a valid video file so will ignore. EXIT!\\"\\n    exit 0\\nfi\\n# Ensure no further pipes fail\\nset -eo pipefail\\n\\necho\\necho \\"Building ffmpeg args...\\"\\necho\\nargs=\\"-hide_banner -loglevel info -i \'${__source_file}\' -strict -2 -max_muxing_queue_size 10240 -map 0 -c:v copy -c:a copy\\"\\nsubtitle_streams_count=0\\nfound_things_to_do=\\"false\\"\\nfor stream in $(echo \\"${probe}\\" | jq -r \'.streams[] | @base64\'); do\\n    index=$(__jq_item \\"${stream}\\" \'.index\')\\n    codec_type=$(__jq_item \\"${stream}\\" \'.codec_type\')\\n    codec_name=$(__jq_item \\"${stream}\\" \'.codec_name\')\\n    echo \\"  Stream #${index}: {type:${codec_type}, codec:${codec_name}}\\"\\n    if [[ \\"${codec_type}\\" == \\"subtitle\\" ]]; then\\n        sub_language=$(__jq_item \\"${stream}\\" \'.tags.language\')\\n        sub_title=$(__jq_item \\"${stream}\\" \'.tags.title\')\\n        echo \\"    - Subtitile Info: {language:${sub_language}, title:${sub_title}}\\"\\n        if [[ \\"${subtitle_streams_count}\\" -ge \\"${NUMBER_OF_SUB_STREAMS_TO_KEEP}\\" ]]; then\\n            echo \\"      - MARKING FOR REMOVAL\\"\\n            args=\\"${args} -map -0:s:${subtitle_streams_count}\\"\\n            found_things_to_do=\\"true\\"\\n        else\\n            args=\\"${args} -c:s:${subtitle_streams_count} copy\\"\\n            echo \\"      - MARKING FOR COPY\\"\\n        fi\\n        ((subtitle_streams_count+=1))\\n    elif [[ \\"${codec_type}\\" == \\"video\\" ]]; then\\n        vid_width=$(__jq_item \\"${stream}\\" \'.width\')\\n        vid_height=$(__jq_item \\"${stream}\\" \'.height\')\\n        echo \\"    - Video Info: {width:${vid_width}, height:${vid_height}}\\"\\n        echo \\"      - MARKING FOR COPY\\"\\n    elif [[ \\"${codec_type}\\" == \\"audio\\" ]]; then\\n        audio_channels=$(__jq_item \\"${stream}\\" \'.channels\')\\n        audio_bit_rate=$(__jq_item \\"${stream}\\" \'.bit_rate\')\\n        echo \\"    - Audio Info: {channels:${audio_channels}, bit_rate:${audio_bit_rate}}\\"\\n        echo \\"      - MARKING FOR COPY\\"\\n    else\\n        echo \\"    - Stream Info: null\\"\\n    fi\\ndone\\n# Only provide a command to execute if streams were found to need modifying\\nif [[ \\"${found_things_to_do}\\" ]]; then\\n    exec_command=\\"ffmpeg ${args} -y \'${__output_cache_file}\'\\"\\nelse\\n    exec_command=\\"\\"\\nfi\\necho\\necho \\"Command: ${exec_command}\\"\\n\\n# Generate return object for Unmanic to execute the command\\n# This script could also execute the command from here if you wish, but Unmanic will process the log differently\\nreturn_object=$(jq --null-input \\\\\\n  --arg exec_command \\"${exec_command}\\" \\\\\\n  --arg file_out \\"${__output_cache_file}\\" \\\\\\n  \'{\\"exec_command\\": $exec_command, \\"file_out\\": $file_out}\')\\nif [[ ! -z ${__return_data_file} ]]; then\\n    echo \\"${return_object}\\" > \\"${__return_data_file}\\"\\n    cat \\"${__return_data_file}\\"\\nfi\\n",\n          "cmd": "",\n          "args": "--source-file=\\"{source_file_path}\\" \\n--output-cache-file=\\"{file_out_path}\\" \\n--return-data-file=\\"{data_json_file}\\"\\n",\n          "script_dependencies": ""\n          }\n      }\n      ],\n      "plugin_flow": {\n      "library_management.file_test": [],\n      "worker.process_item": ["processor_script"],\n      "postprocessor.file_move": [],\n      "postprocessor.task_result": []\n      }\n  },\n  "library_config": {\n      "name": "| Example | Subtitle Stripping"\n  }\n}\n\n'))),(0,r.kt)(o.Z,{value:"manual_config",mdxType:"TabItem"},"Ensure you have installed the ",(0,r.kt)("b",null,"External Worker Processor Script")," plugin.",(0,r.kt)("img",{className:"screenshot",style:{width:"400px"},src:n(7607).Z}),(0,r.kt)("p",null,"  Configure the plugin with the following:"),(0,r.kt)("h4",{id:"execution-type"},"Execution Type:"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Bash Script")),(0,r.kt)("h4",{id:"script"},"Script:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'#!/usr/bin/env bash\n###\n# File: strip-subs.sh\n# Project: tmp.BXJ7lwK6lZ\n# File Created: Friday, 14th October 2022 5:35:18 am\n# Author: Josh Sunnex (jsunnex@gmail.com)\n# -----\n# Last Modified: Friday, 14th October 2022 7:17:32 am\n# Modified By: Josh Sunnex (jsunnex@gmail.com)\n###\n\n###################################################################\n# CONFIG:\n# NUMBER_OF_SUB_STREAMS_TO_KEEP\n#   Specify the number of subtitle streams to keep.\n#   Script will preserve the number of subtitle streams specified \n#     in this value. All others will be stripped out.\n#   Set this value to 0 to remove all subtitle streams.\nNUMBER_OF_SUB_STREAMS_TO_KEEP=1\n###################################################################\n\n# Parse Args\n__library_id=""\n__output_cache_file=""\n__original_source_file=""\n__original_source_size=""\n__source_file=""\n__source_size=""\n__return_data_file=""\n__positional_args=()\nfor i in "${@}"; do\ncase $i in\n  --library-id=*)\n    __library_id="${i#*=}"\n    shift # past argument=value\n    ;;\n  --output-cache-file=*)\n    __output_cache_file="${i#*=}"\n    shift # past argument=value\n    ;;\n  --original-source-file=*)\n    __original_source_file="${i#*=}"\n    shift # past argument=value\n    ;;\n  --original-source-size=*)\n    __original_source_size="${i#*=}"\n    shift # past argument=value\n    ;;\n  -s=*|--source-file=*)\n    __source_file="${i#*=}"\n    shift # past argument=value\n    ;;\n  --source-size=*)\n    __source_size="${i#*=}"\n    shift # past argument=value\n    ;;\n  --return-data-file=*)\n    __return_data_file="${i#*=}"\n    shift # past argument=value\n    ;;\n  -*|--*)\n    echo "Unknown option $i"\n    exit 1\n    ;;\n  *)\n    __positional_args+=("$1") # save positional arg\n    shift # past argument\n    ;;\nesac\ndone\nset -- "${__positional_args[@]}" # restore positional parameters\n\n# Helper functions\n__jq_item() {\n  echo "${1}" | base64 --decode | jq -r "${2}"\n}\n\n# Generate ffmpeg command\necho\necho "Probing file \'${__source_file}\'..."\nprobe=$(ffprobe -show_format -show_streams -print_format json -loglevel quiet "${__source_file}")\nif [[ $? -gt 0 ]]; then\n  # Probably not a video file\n  echo "Unable to probe file. This is probably not a valid video file so will ignore. EXIT!"\n  exit 0\nfi\n# Ensure no further pipes fail\nset -eo pipefail\n\necho\necho "Building ffmpeg args..."\necho\nargs="-hide_banner -loglevel info -i \'${__source_file}\' -strict -2 -max_muxing_queue_size 10240 -map 0 -c:v copy -c:a copy"\nsubtitle_streams_count=0\nfound_things_to_do="false"\nfor stream in $(echo "${probe}" | jq -r \'.streams[] | @base64\'); do\n  index=$(__jq_item "${stream}" \'.index\')\n  codec_type=$(__jq_item "${stream}" \'.codec_type\')\n  codec_name=$(__jq_item "${stream}" \'.codec_name\')\n  echo "  Stream #${index}: {type:${codec_type}, codec:${codec_name}}"\n  if [[ "${codec_type}" == "subtitle" ]]; then\n      sub_language=$(__jq_item "${stream}" \'.tags.language\')\n      sub_title=$(__jq_item "${stream}" \'.tags.title\')\n      echo "    - Subtitile Info: {language:${sub_language}, title:${sub_title}}"\n      if [[ "${subtitle_streams_count}" -ge "${NUMBER_OF_SUB_STREAMS_TO_KEEP}" ]]; then\n          echo "      - MARKING FOR REMOVAL"\n          args="${args} -map -0:s:${subtitle_streams_count}"\n          found_things_to_do="true"\n      else\n          args="${args} -c:s:${subtitle_streams_count} copy"\n          echo "      - MARKING FOR COPY"\n      fi\n      ((subtitle_streams_count+=1))\n  elif [[ "${codec_type}" == "video" ]]; then\n      vid_width=$(__jq_item "${stream}" \'.width\')\n      vid_height=$(__jq_item "${stream}" \'.height\')\n      echo "    - Video Info: {width:${vid_width}, height:${vid_height}}"\n      echo "      - MARKING FOR COPY"\n  elif [[ "${codec_type}" == "audio" ]]; then\n      audio_channels=$(__jq_item "${stream}" \'.channels\')\n      audio_bit_rate=$(__jq_item "${stream}" \'.bit_rate\')\n      echo "    - Audio Info: {channels:${audio_channels}, bit_rate:${audio_bit_rate}}"\n      echo "      - MARKING FOR COPY"\n  else\n      echo "    - Stream Info: null"\n  fi\ndone\n# Only provide a command to execute if streams were found to need modifying\nif [[ "${found_things_to_do}" ]]; then\n  exec_command="ffmpeg ${args} -y \'${__output_cache_file}\'"\nelse\n  exec_command=""\nfi\necho\necho "Command: ${exec_command}"\n\n# Generate return object for Unmanic to execute the command\n# This script could also execute the command from here if you wish, but Unmanic will process the log differently\nreturn_object=$(jq --null-input \\\n--arg exec_command "${exec_command}" \\\n--arg file_out "${__output_cache_file}" \\\n\'{"exec_command": $exec_command, "file_out": $file_out}\')\nif [[ ! -z ${__return_data_file} ]]; then\n  echo "${return_object}" > "${__return_data_file}"\n  cat "${__return_data_file}"\nfi\n\n')),(0,r.kt)("h4",{id:"arguments"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'--source-file="{source_file_path}" \n--output-cache-file="{file_out_path}" \n--return-data-file="{data_json_file}"\n')))))}m.isMDXComponent=!0},2209:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/import_config-14b96ba794daac45fb156c146e05caed.png"},7607:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/external_worker_processor_script-c212e5b688f43e07d954752e5e70fe42.png"}}]);