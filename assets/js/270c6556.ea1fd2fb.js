"use strict";(self.webpackChunkunmanic_documentation=self.webpackChunkunmanic_documentation||[]).push([[448],{9219:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return f},default:function(){return w},frontMatter:function(){return k},metadata:function(){return m},toc:function(){return h}});var s=n(7462),o=n(3366),i=n(7294),r=n(3905),l=n(1721),a=n(5697),c=n.n(a),d=n(412),u=function(e){function t(t){var n;return(n=e.call(this,t)||this).state={},n}(0,l.Z)(t,e);var s=t.prototype;return s.componentDidMount=function(){d.Z.canUseDOM&&this.setState({Flowchart:n(1677).Z})},s.render=function(){var e=this.state.Flowchart,t=this.props,n=t.chartCode;t.scale;return d.Z.canUseDOM&&e?i.createElement("div",{style:{overflowX:"scroll"}},i.createElement(e,{options:{x:0,y:0,"line-width":3,"line-length":50,"text-margin":10,"font-size":14,"font-color":"black","line-color":"black","element-color":"black",fill:"white","yes-text":"yes","no-text":"no","arrow-end":"block",scale:.6,symbols:{start:{"font-color":"red","element-color":"green","font-weight":"bold"},end:{"font-color":"red","element-color":"green","font-weight":"bold"}},flowstate:{runner:{fill:"pink"},external:{fill:"green"}}},chartCode:n})):i.createElement("div",null)},t}(i.Component);u.propTypes={chartCode:c().string.isRequired,scale:c().number};var p=u,g=["components"],k={title:"Plugins Overview",description:"An Overview of Unmanic Plugins",id:"overview"},f=void 0,m={unversionedId:"plugins/overview",id:"plugins/overview",isDocsHomePage:!1,title:"Plugins Overview",description:"An Overview of Unmanic Plugins",source:"@site/docs/plugins/overview.mdx",sourceDirName:"plugins",slug:"/plugins/overview",permalink:"/docs/plugins/overview",tags:[],version:"current",frontMatter:{title:"Plugins Overview",description:"An Overview of Unmanic Plugins",id:"overview"},sidebar:"docs",previous:{title:"Library Settings",permalink:"/docs/configuration/library_settings"},next:{title:"Installing Plugins",permalink:"/docs/plugins/installing_plugins"}},h=[{value:"Plugin execution during Task flow",id:"plugin-execution-during-task-flow",children:[]}],v={toc:h};function w(e){var t=e.components,n=(0,o.Z)(e,g);return(0,r.kt)("wrapper",(0,s.Z)({},v,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,'Unmanic features a Plugin system to extend Unmanic\'s capabilities.\nPlugins are stand-alone scripts or "modules" that are executed by Unmanic at defined stages during its task processing.'),(0,r.kt)("p",null,"Usually, Plugins are designed to carry out one function only.\nHowever some Plugins are designed to be executed at multiple stages of task processing."),(0,r.kt)("p",null,"For example, you may install a Plugin that will run during the library scan process to detect files that need to be added to the ",(0,r.kt)("a",{parentName:"p",href:"/docs/dashboard/pending_tasks"},"Pending Tasks queue")," due to an incorrect video codec.\nWhen the ",(0,r.kt)("a",{parentName:"p",href:"/docs/dashboard/workers"},"Worker")," picks up the task, it may execute that same Plugin again which will now handle the job of transcoding the video streams to the configured codec."),(0,r.kt)("p",null,"In this example the Plugin has carried out two separate jobs at different stages of Unmanic's task processing."),(0,r.kt)("p",null,"Use Plugins to build powerful library optimisation flows."),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"plugin-execution-during-task-flow"},"Plugin execution during Task flow"),(0,r.kt)("p",null,"Sections in pink will execute all Plugins configured for that stage of the process."),(0,r.kt)(p,{chartCode:"\n    st=>start: Start\n    discoverFile=>operation: File discovered by Library Scanner or Event Monitor.\n    testFile=>condition: File Test Should it be added to Pending Tasks?|runner\n    fileNotAdded=>operation: File not added. to Pending Tasks queue.\n    pendingTasks=>operation: Added to Pending Tasks list.\n    workerCollects=>operation: Worker picks up file from Pending Tasks queue.\n    workerProcessTask=>operation: Worker loops over all Plugins and the default processes for the collected task|runner\n    workerCompletesTask=>operation: Worker completes task and places it into a Post Processor queue\n    postProcessorCollects=>operation: A single Post Processor process collects tasks completed by the workers\n    postProcessorProcessTask=>operation: The Post Processor loops over all Plugins and the default processes for the collected task|runner\n    taskSuccess=>condition: Were all tasks successful?\n    completedTasksFailed=>operation: Task added to history as failure.\n    completedTasksSuccess=>operation: Task added to history as success.\n    eIgnored=>end: End - File ignored\n    eFailed=>end: End - File failed at least one stage of being processed\n    eSuccess=>end: End - File successfully processed\n    \n    st->discoverFile->testFile\n    testFile(no,right)->fileNotAdded->eIgnored\n    testFile(yes)->pendingTasks\n    pendingTasks->workerCollects->workerProcessTask->workerCompletesTask\n    workerCompletesTask->postProcessorCollects->postProcessorProcessTask->taskSuccess\n    taskSuccess(no,right)->completedTasksFailed->eFailed\n    taskSuccess(yes,bottom)->completedTasksSuccess->eSuccess\n    \n  ",mdxType:"Flowchart"}))}w.isMDXComponent=!0}}]);