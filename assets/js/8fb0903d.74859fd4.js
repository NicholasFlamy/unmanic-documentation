"use strict";(self.webpackChunkunmanic_documentation=self.webpackChunkunmanic_documentation||[]).push([[488],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var u=r.createContext({}),s=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(u.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,u=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=s(n),m=i,g=d["".concat(u,".").concat(m)]||d[m]||c[m]||a;return n?r.createElement(g,o(o({ref:t},p),{},{components:n})):r.createElement(g,o({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=d;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var s=2;s<a;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5483:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return u},metadata:function(){return s},toc:function(){return p},default:function(){return d}});var r=n(7462),i=n(3366),a=(n(7294),n(3905)),o=["components"],l={title:"Introduction to Writing Plugins",id:"introduction"},u=void 0,s={unversionedId:"development/writing_plugins/introduction",id:"development/writing_plugins/introduction",isDocsHomePage:!1,title:"Introduction to Writing Plugins",description:"Writing Plugins for Unmanic should be easy.",source:"@site/docs/development/writing_plugins/introduction.mdx",sourceDirName:"development/writing_plugins",slug:"/development/writing_plugins/introduction",permalink:"/docs/development/writing_plugins/introduction",tags:[],version:"current",frontMatter:{title:"Introduction to Writing Plugins",id:"introduction"},sidebar:"docs",previous:{title:"Plugin Development Overview",permalink:"/docs/development/developing_plugins"},next:{title:"Creating a New Plugin",permalink:"/docs/development/writing_plugins/creating_a_new_plugin"}},p=[{value:"Directory Structure",id:"directory-structure",children:[]},{value:"Plugin Module",id:"plugin-module",children:[]}],c={toc:p};function d(e){var t=e.components,n=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Writing Plugins for Unmanic should be easy. "),(0,a.kt)("p",null,"All that is required to get started is a basic knowledge of writing\nPython scripts."),(0,a.kt)("h2",{id:"directory-structure"},"Directory Structure"),(0,a.kt)("p",null,"The directory structure of a Plugin should be:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"my_new_plugin\n\u251c\u2500\u2500 changelog.md\n\u251c\u2500\u2500 info.json\n\u2514\u2500\u2500 plugin.py\n")),(0,a.kt)("hr",null),(0,a.kt)("h4",{id:"file-changelogjson"},"File: changelog.json"),(0,a.kt)("p",null,"This file should be used to record changes made to the Plugin."),(0,a.kt)("hr",null),(0,a.kt)("h4",{id:"file-infojson"},"File: info.json"),(0,a.kt)("p",null,"A JSON file containing the metadata of your Plugin.\nThis JSON file should contain the following data:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"id"))," - A string identifier for your Plugin. Should only contain lowercase ",(0,a.kt)("inlineCode",{parentName:"li"},"a-z")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"_")," characters."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"name"))," - A very short name for your Plugin."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"author"))," - Your name."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"version"))," - The version of your Plugin."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"description"))," - A long description of your Plugin detailing what it does. To include line-breaks, insert a ",(0,a.kt)("inlineCode",{parentName:"li"},"\\n"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"icon"))," - A URI to an image. If no icon is provided, the default Plugin icon will be used in the WebUI."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"tags"))," - A comma separated list able to be used as keywords when searching for Plugins."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"compatibility"))," - A list of Unmanic Plugin Handler versions that this Plugin is compatible with."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"priorities"))," - A dictionary of the initial priority that this Plugin's runners within the Plugin flow.")),(0,a.kt)("h5",{id:"example"},"Example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "id": "reorder_subtitle_streams_by_language",\n    "name": "Re-order subtitle streams by language",\n    "author": "Josh.5",\n    "version": "0.0.1",\n    "description": "Specify a language tag for Unmanic to try and put as 1st subtitle track.\\n\\nIn the plugin settings, specify a \'Search String\'. The plugin will search the files to find matching subtitle tracks. The matching subtitle tracks will be moved to the 1st subtitle track position.\\n\\nExamples of search strings:\\n  - \'en\'\\n  - \'fr\'\\n  - \'de\'",\n    "icon": ""\n    "tags": "subtitle,ffmpeg,worker",\n    "compatibility": [\n        1\n    ],\n    "priorities": {\n        "on_library_management_file_test": 99,\n        "on_worker_process": 1\n    }\n}\n')),(0,a.kt)("hr",null),(0,a.kt)("h4",{id:"file-pluginpy"},"File: plugin.py"),(0,a.kt)("p",null,"The main Pugin Python module."),(0,a.kt)("p",null,"This file will be imported and it's functions called byt he main Unmanic process."),(0,a.kt)("h2",{id:"plugin-module"},"Plugin Module"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"plugin.py")," file is a stand-alone Python module. From this module you may import other\nmodules as you see fit. There is no limitation on what may be executed within the\n",(0,a.kt)("a",{parentName:"p",href:"#runners"},(0,a.kt)("strong",{parentName:"a"},"runner")),"\nof your Plugin."),(0,a.kt)("hr",null),(0,a.kt)("h4",{id:"runners"},"Runners"),(0,a.kt)("p",null,"The Plugin module is made up of defined ",(0,a.kt)("strong",{parentName:"p"},"runner")," functions. A Plugin may include multiple\nrunner functions such that it is executed at multiple stages of the library optimisation process,\nhowever it is recommended that a Plugin carry out only a single task and therefore only include\na single runner function."),(0,a.kt)("p",null,"A ",(0,a.kt)("strong",{parentName:"p"},"data")," parameter is provided to the runner functions. This data parameter is a dictionary\nobject of information pertaining to that stage of the library optimisation process.\nWhatever data schema is provided to a Plugin runner must also be returned at the end of that\nfunction. During the function, that data may be manipulated as you see fit. However, a Plugin\nrunner may fail if data is removed from that data dictionary."),(0,a.kt)("p",null,"Plugins should be tested with the ",(0,a.kt)("a",{parentName:"p",href:"/docs/development/plugin_manager_cli"},(0,a.kt)("strong",{parentName:"a"},"Plugin Manager CLI"))," before publishing changes to ensure\nthat the returned data matches the required schema for all included runner functions."),(0,a.kt)("h5",{id:"example-1"},"Example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def on_worker_process(data):\n    ...\n    return data\n")),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Runner Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Documentation"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"on_library_management_file_test"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/development/writing_plugins/plugin_runner_types#library-management---file-test"},"LINK"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"on_worker_process"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/development/writing_plugins/plugin_runner_types#worker---processing-file"},"LINK"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"on_postprocessor_file_movement"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/development/writing_plugins/plugin_runner_types#post-processor---file-movements"},"LINK"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"on_postprocessor_task_results"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/development/writing_plugins/plugin_runner_types#post-processor---marking-task-successfailure"},"LINK"))))))}d.isMDXComponent=!0}}]);