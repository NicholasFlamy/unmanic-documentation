"use strict";(self.webpackChunkunmanic_documentation=self.webpackChunkunmanic_documentation||[]).push([[4183],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=i.createContext({}),u=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return i.createElement(l.Provider,{value:t},e.children)},_={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},p=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(n),m=a,d=p["".concat(l,".").concat(m)]||p[m]||_[m]||r;return n?i.createElement(d,o(o({ref:t},c),{},{components:n})):i.createElement(d,o({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var u=2;u<r;u++)o[u]=n[u];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}p.displayName="MDXCreateElement"},8215:function(e,t,n){n.d(t,{Z:function(){return a}});var i=n(7294);function a(e){var t=e.children,n=e.hidden,a=e.className;return i.createElement("div",{role:"tabpanel",hidden:n,className:a},t)}},9877:function(e,t,n){n.d(t,{Z:function(){return c}});var i=n(7462),a=n(7294),r=n(2389),o=n(5979),s=n(6010),l="tabItem_LplD";function u(e){var t,n,r,u=e.lazy,c=e.block,_=e.defaultValue,p=e.values,m=e.groupId,d=e.className,f=a.Children.map(e.children,(function(e){if((0,a.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),h=null!=p?p:f.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),g=(0,o.lx)(h,(function(e,t){return e.value===t.value}));if(g.length>0)throw new Error('Docusaurus error: Duplicate values "'+g.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var b=null===_?_:null!=(t=null!=_?_:null==(n=f.find((function(e){return e.props.default})))?void 0:n.props.value)?t:null==(r=f[0])?void 0:r.props.value;if(null!==b&&!h.some((function(e){return e.value===b})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+b+'" but none of its children has the corresponding value. Available values are: '+h.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var v=(0,o.UB)(),y=v.tabGroupChoices,$=v.setTabGroupChoices,w=(0,a.useState)(b),k=w[0],N=w[1],x=[],O=(0,o.o5)().blockElementScrollPositionUntilNextRender;if(null!=m){var S=y[m];null!=S&&S!==k&&h.some((function(e){return e.value===S}))&&N(S)}var E=function(e){var t=e.currentTarget,n=x.indexOf(t),i=h[n].value;i!==k&&(O(t),N(i),null!=m&&$(m,i))},j=function(e){var t,n=null;switch(e.key){case"ArrowRight":var i=x.indexOf(e.currentTarget)+1;n=x[i]||x[0];break;case"ArrowLeft":var a=x.indexOf(e.currentTarget)-1;n=x[a]||x[x.length-1]}null==(t=n)||t.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":c},d)},h.map((function(e){var t=e.value,n=e.label,r=e.attributes;return a.createElement("li",(0,i.Z)({role:"tab",tabIndex:k===t?0:-1,"aria-selected":k===t,key:t,ref:function(e){return x.push(e)},onKeyDown:j,onFocus:E,onClick:E},r,{className:(0,s.Z)("tabs__item",l,null==r?void 0:r.className,{"tabs__item--active":k===t})}),null!=n?n:t)}))),u?(0,a.cloneElement)(f.filter((function(e){return e.props.value===k}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},f.map((function(e,t){return(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==k})}))))}function c(e){var t=(0,r.Z)();return a.createElement(u,(0,i.Z)({key:String(t)},e))}},5001:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return c},default:function(){return f},frontMatter:function(){return u},metadata:function(){return _},toc:function(){return m}});var i=n(7462),a=n(3366),r=(n(7294),n(3905)),o=n(9877),s=n(8215),l=["components"],u={title:"Subtitle Stripping",description:"Strip subtitle streams out of video files",id:"script_subtitle_stripping"},c=void 0,_={unversionedId:"guides/script_subtitle_stripping",id:"guides/script_subtitle_stripping",title:"Subtitle Stripping",description:"Strip subtitle streams out of video files",source:"@site/docs/guides/plugin_strip_subs.mdx",sourceDirName:"guides",slug:"/guides/script_subtitle_stripping",permalink:"/docs/guides/script_subtitle_stripping",tags:[],version:"current",frontMatter:{title:"Subtitle Stripping",description:"Strip subtitle streams out of video files",id:"script_subtitle_stripping"},sidebar:"docs",previous:{title:"Running a FileBot Post-processor",permalink:"/docs/guides/filebot_post_processor"}},p={},m=[{value:"Instructions:",id:"instructions",level:2},{value:"Execution Type:",id:"execution-type",level:4},{value:"Script:",id:"script",level:4},{value:"Arguments:",id:"arguments",level:4}],d={toc:m};function f(e){var t=e.components,u=(0,a.Z)(e,l);return(0,r.kt)("wrapper",(0,i.Z)({},d,u,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://img.shields.io/badge/Difficulty-easy-green?style=flat",alt:"Difficulty"}),"\n",(0,r.kt)("img",{parentName:"p",src:"https://img.shields.io/badge/Setup%20Time-5%20minutes-green?style=flat",alt:"Setup Time"}),"\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/josh5"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/badge/Original%20Author-josh5-lightgrey?style=flat?style=plastic&logo=github",alt:"Original Author"}))),(0,r.kt)("p",null,"Stripping subtitle streams is really simple. This guide will add a simple script that will strip subtitle streams from your file.\nOptionally, you will have the ability to specify a number of streams that you wish to keep."),(0,r.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Currently, this setup does not container a library scan file test runner.\nTherefore, it will not process files without another plugin in the library's\nplugin flow to test that the scanned files need to be processed."))),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Compliment this configuration with the plugin ",(0,r.kt)("strong",{parentName:"p"},"Re-order subtitle streams by language"),"."),(0,r.kt)("p",{parentName:"div"},"You can re-order your subtitle streams to have a particular language first,\nthen use this process to strip out all the ones remaining."))),(0,r.kt)("h2",{id:"instructions"},"Instructions:"),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Once installed, you can configure the script by editing the top section:"),(0,r.kt)("pre",{parentName:"div"},(0,r.kt)("code",{parentName:"pre"},"###################################################################\n# CONFIG:\n# NUMBER_OF_SUB_STREAMS_TO_KEEP\n#   Specify the number of subtitle streams to keep.\n#   Script will preserve the number of subtitle streams specified \n#     in this value. All others will be stripped out.\n#   Set this value to 0 to remove all subtitle streams.\nNUMBER_OF_SUB_STREAMS_TO_KEEP=1\n###################################################################\n")))),(0,r.kt)(o.Z,{defaultValue:"manual_config",values:[{label:"Manual Config",value:"manual_config"},{label:"Unmanic Library Import",value:"library_import"}],mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"library_import",mdxType:"TabItem"},"Import this via the Unmanic library config importer.",(0,r.kt)("img",{className:"screenshot",style:{width:"400px"},src:n(2209).Z}),(0,r.kt)("p",null,"  Once imported, modify the library to suit your needs."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "plugins": {\n      "enabled_plugins": [\n      {\n          "plugin_id": "processor_script",\n          "has_config": true,\n          "settings": {\n          "input_type": "bash",\n          "script": "#!/usr/bin/env bash\\n###\\n# File: strip-subs.sh\\n# Project: tmp.BXJ7lwK6lZ\\n# File Created: Friday, 14th October 2022 5:35:18 am\\n# Author: Josh Sunnex (jsunnex@gmail.com)\\n# -----\\n# Last Modified: Friday, 14th October 2022 7:17:32 am\\n# Modified By: Josh Sunnex (jsunnex@gmail.com)\\n###\\n\\n###################################################################\\n# CONFIG:\\n# NUMBER_OF_SUB_STREAMS_TO_KEEP\\n#   Specify the number of subtitle streams to keep.\\n#   Script will preserve the number of subtitle streams specified \\n#     in this value. All others will be stripped out.\\n#   Set this value to 0 to remove all subtitle streams.\\nNUMBER_OF_SUB_STREAMS_TO_KEEP=3\\n###################################################################\\n\\n# Parse Args\\n__library_id=\\"\\"\\n__output_cache_file=\\"\\"\\n__original_source_file=\\"\\"\\n__original_source_size=\\"\\"\\n__source_file=\\"\\"\\n__source_size=\\"\\"\\n__return_data_file=\\"\\"\\n__positional_args=()\\nfor i in \\"${@}\\"; do\\n  case $i in\\n    --library-id=*)\\n      __library_id=\\"${i#*=}\\"\\n      shift # past argument=value\\n      ;;\\n    --output-cache-file=*)\\n      __output_cache_file=\\"${i#*=}\\"\\n      shift # past argument=value\\n      ;;\\n    --original-source-file=*)\\n      __original_source_file=\\"${i#*=}\\"\\n      shift # past argument=value\\n      ;;\\n    --original-source-size=*)\\n      __original_source_size=\\"${i#*=}\\"\\n      shift # past argument=value\\n      ;;\\n    -s=*|--source-file=*)\\n      __source_file=\\"${i#*=}\\"\\n      shift # past argument=value\\n      ;;\\n    --source-size=*)\\n      __source_size=\\"${i#*=}\\"\\n      shift # past argument=value\\n      ;;\\n    --return-data-file=*)\\n      __return_data_file=\\"${i#*=}\\"\\n      shift # past argument=value\\n      ;;\\n    -*|--*)\\n      echo \\"Unknown option $i\\"\\n      exit 1\\n      ;;\\n    *)\\n      __positional_args+=(\\"$1\\") # save positional arg\\n      shift # past argument\\n      ;;\\n  esac\\ndone\\nset -- \\"${__positional_args[@]}\\" # restore positional parameters\\n\\n# Helper functions\\n__jq_item() {\\n    echo \\"${1}\\" | base64 --decode | jq -r \\"${2}\\"\\n}\\n\\n# Generate ffmpeg command\\necho\\necho \\"Probing file \'${__source_file}\'...\\"\\nprobe=$(ffprobe -show_format -show_streams -print_format json -loglevel quiet \\"${__source_file}\\")\\nif [[ $? -gt 0 ]]; then\\n    # Probably not a video file\\n    echo \\"Unable to probe file. This is probably not a valid video file so will ignore. EXIT!\\"\\n    exit 0\\nfi\\n# Ensure no further pipes fail\\nset -eo pipefail\\n\\necho\\necho \\"Building ffmpeg args...\\"\\necho\\nargs=\\"-hide_banner -loglevel info -i \'${__source_file}\' -strict -2 -max_muxing_queue_size 10240 -map 0 -c:v copy -c:a copy\\"\\nsubtitle_streams_count=0\\nfound_things_to_do=\\"false\\"\\nfor stream in $(echo \\"${probe}\\" | jq -r \'.streams[] | @base64\'); do\\n    index=$(__jq_item \\"${stream}\\" \'.index\')\\n    codec_type=$(__jq_item \\"${stream}\\" \'.codec_type\')\\n    codec_name=$(__jq_item \\"${stream}\\" \'.codec_name\')\\n    echo \\"  Stream #${index}: {type:${codec_type}, codec:${codec_name}}\\"\\n    if [[ \\"${codec_type}\\" == \\"subtitle\\" ]]; then\\n        sub_language=$(__jq_item \\"${stream}\\" \'.tags.language\')\\n        sub_title=$(__jq_item \\"${stream}\\" \'.tags.title\')\\n        echo \\"    - Subtitile Info: {language:${sub_language}, title:${sub_title}}\\"\\n        if [[ \\"${subtitle_streams_count}\\" -ge \\"${NUMBER_OF_SUB_STREAMS_TO_KEEP}\\" ]]; then\\n            echo \\"      - MARKING FOR REMOVAL\\"\\n            args=\\"${args} -map -0:s:${subtitle_streams_count}\\"\\n            found_things_to_do=\\"true\\"\\n        else\\n            args=\\"${args} -c:s:${subtitle_streams_count} copy\\"\\n            echo \\"      - MARKING FOR COPY\\"\\n        fi\\n        ((subtitle_streams_count+=1))\\n    elif [[ \\"${codec_type}\\" == \\"video\\" ]]; then\\n        vid_width=$(__jq_item \\"${stream}\\" \'.width\')\\n        vid_height=$(__jq_item \\"${stream}\\" \'.height\')\\n        echo \\"    - Video Info: {width:${vid_width}, height:${vid_height}}\\"\\n        echo \\"      - MARKING FOR COPY\\"\\n    elif [[ \\"${codec_type}\\" == \\"audio\\" ]]; then\\n        audio_channels=$(__jq_item \\"${stream}\\" \'.channels\')\\n        audio_bit_rate=$(__jq_item \\"${stream}\\" \'.bit_rate\')\\n        echo \\"    - Audio Info: {channels:${audio_channels}, bit_rate:${audio_bit_rate}}\\"\\n        echo \\"      - MARKING FOR COPY\\"\\n    else\\n        echo \\"    - Stream Info: null\\"\\n    fi\\ndone\\n# Only provide a command to execute if streams were found to need modifying\\nif [[ \\"${found_things_to_do}\\" ]]; then\\n    exec_command=\\"ffmpeg ${args} -y \'${__output_cache_file}\'\\"\\nelse\\n    exec_command=\\"\\"\\nfi\\necho\\necho \\"Command: ${exec_command}\\"\\n\\n# Generate return object for Unmanic to execute the command\\n# This script could also execute the command from here if you wish, but Unmanic will process the log differently\\nreturn_object=$(jq --null-input \\\\\\n  --arg exec_command \\"${exec_command}\\" \\\\\\n  --arg file_out \\"${__output_cache_file}\\" \\\\\\n  \'{\\"exec_command\\": $exec_command, \\"file_out\\": $file_out}\')\\nif [[ ! -z ${__return_data_file} ]]; then\\n    echo \\"${return_object}\\" > \\"${__return_data_file}\\"\\n    cat \\"${__return_data_file}\\"\\nfi\\n",\n          "cmd": "",\n          "args": "--source-file=\\"{source_file_path}\\" \\n--output-cache-file=\\"{file_out_path}\\" \\n--return-data-file=\\"{data_json_file}\\"\\n",\n          "script_dependencies": ""\n          }\n      }\n      ],\n      "plugin_flow": {\n      "library_management.file_test": [],\n      "worker.process_item": ["processor_script"],\n      "postprocessor.file_move": [],\n      "postprocessor.task_result": []\n      }\n  },\n  "library_config": {\n      "name": "| Example | Subtitle Stripping"\n  }\n}\n\n'))),(0,r.kt)(s.Z,{value:"manual_config",mdxType:"TabItem"},"Ensure you have installed the ",(0,r.kt)("b",null,"External Worker Processor Script")," plugin.",(0,r.kt)("img",{className:"screenshot",style:{width:"400px"},src:n(7607).Z}),(0,r.kt)("p",null,"  Configure the plugin with the following:"),(0,r.kt)("h4",{id:"execution-type"},"Execution Type:"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Bash Script")),(0,r.kt)("h4",{id:"script"},"Script:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'#!/usr/bin/env bash\n###\n# File: strip-subs.sh\n# Project: tmp.BXJ7lwK6lZ\n# File Created: Friday, 14th October 2022 5:35:18 am\n# Author: Josh Sunnex (jsunnex@gmail.com)\n# -----\n# Last Modified: Friday, 14th October 2022 7:17:32 am\n# Modified By: Josh Sunnex (jsunnex@gmail.com)\n###\n\n###################################################################\n# CONFIG:\n# NUMBER_OF_SUB_STREAMS_TO_KEEP\n#   Specify the number of subtitle streams to keep.\n#   Script will preserve the number of subtitle streams specified \n#     in this value. All others will be stripped out.\n#   Set this value to 0 to remove all subtitle streams.\nNUMBER_OF_SUB_STREAMS_TO_KEEP=1\n###################################################################\n\n# Parse Args\n__library_id=""\n__output_cache_file=""\n__original_source_file=""\n__original_source_size=""\n__source_file=""\n__source_size=""\n__return_data_file=""\n__positional_args=()\nfor i in "${@}"; do\ncase $i in\n  --library-id=*)\n    __library_id="${i#*=}"\n    shift # past argument=value\n    ;;\n  --output-cache-file=*)\n    __output_cache_file="${i#*=}"\n    shift # past argument=value\n    ;;\n  --original-source-file=*)\n    __original_source_file="${i#*=}"\n    shift # past argument=value\n    ;;\n  --original-source-size=*)\n    __original_source_size="${i#*=}"\n    shift # past argument=value\n    ;;\n  -s=*|--source-file=*)\n    __source_file="${i#*=}"\n    shift # past argument=value\n    ;;\n  --source-size=*)\n    __source_size="${i#*=}"\n    shift # past argument=value\n    ;;\n  --return-data-file=*)\n    __return_data_file="${i#*=}"\n    shift # past argument=value\n    ;;\n  -*|--*)\n    echo "Unknown option $i"\n    exit 1\n    ;;\n  *)\n    __positional_args+=("$1") # save positional arg\n    shift # past argument\n    ;;\nesac\ndone\nset -- "${__positional_args[@]}" # restore positional parameters\n\n# Helper functions\n__jq_item() {\n  echo "${1}" | base64 --decode | jq -r "${2}"\n}\n\n# Generate ffmpeg command\necho\necho "Probing file \'${__source_file}\'..."\nprobe=$(ffprobe -show_format -show_streams -print_format json -loglevel quiet "${__source_file}")\nif [[ $? -gt 0 ]]; then\n  # Probably not a video file\n  echo "Unable to probe file. This is probably not a valid video file so will ignore. EXIT!"\n  exit 0\nfi\n# Ensure no further pipes fail\nset -eo pipefail\n\necho\necho "Building ffmpeg args..."\necho\nargs="-hide_banner -loglevel info -i \'${__source_file}\' -strict -2 -max_muxing_queue_size 10240 -map 0 -c:v copy -c:a copy"\nsubtitle_streams_count=0\nfound_things_to_do="false"\nfor stream in $(echo "${probe}" | jq -r \'.streams[] | @base64\'); do\n  index=$(__jq_item "${stream}" \'.index\')\n  codec_type=$(__jq_item "${stream}" \'.codec_type\')\n  codec_name=$(__jq_item "${stream}" \'.codec_name\')\n  echo "  Stream #${index}: {type:${codec_type}, codec:${codec_name}}"\n  if [[ "${codec_type}" == "subtitle" ]]; then\n      sub_language=$(__jq_item "${stream}" \'.tags.language\')\n      sub_title=$(__jq_item "${stream}" \'.tags.title\')\n      echo "    - Subtitile Info: {language:${sub_language}, title:${sub_title}}"\n      if [[ "${subtitle_streams_count}" -ge "${NUMBER_OF_SUB_STREAMS_TO_KEEP}" ]]; then\n          echo "      - MARKING FOR REMOVAL"\n          args="${args} -map -0:s:${subtitle_streams_count}"\n          found_things_to_do="true"\n      else\n          args="${args} -c:s:${subtitle_streams_count} copy"\n          echo "      - MARKING FOR COPY"\n      fi\n      ((subtitle_streams_count+=1))\n  elif [[ "${codec_type}" == "video" ]]; then\n      vid_width=$(__jq_item "${stream}" \'.width\')\n      vid_height=$(__jq_item "${stream}" \'.height\')\n      echo "    - Video Info: {width:${vid_width}, height:${vid_height}}"\n      echo "      - MARKING FOR COPY"\n  elif [[ "${codec_type}" == "audio" ]]; then\n      audio_channels=$(__jq_item "${stream}" \'.channels\')\n      audio_bit_rate=$(__jq_item "${stream}" \'.bit_rate\')\n      echo "    - Audio Info: {channels:${audio_channels}, bit_rate:${audio_bit_rate}}"\n      echo "      - MARKING FOR COPY"\n  else\n      echo "    - Stream Info: null"\n  fi\ndone\n# Only provide a command to execute if streams were found to need modifying\nif [[ "${found_things_to_do}" ]]; then\n  exec_command="ffmpeg ${args} -y \'${__output_cache_file}\'"\nelse\n  exec_command=""\nfi\necho\necho "Command: ${exec_command}"\n\n# Generate return object for Unmanic to execute the command\n# This script could also execute the command from here if you wish, but Unmanic will process the log differently\nreturn_object=$(jq --null-input \\\n--arg exec_command "${exec_command}" \\\n--arg file_out "${__output_cache_file}" \\\n\'{"exec_command": $exec_command, "file_out": $file_out}\')\nif [[ ! -z ${__return_data_file} ]]; then\n  echo "${return_object}" > "${__return_data_file}"\n  cat "${__return_data_file}"\nfi\n\n')),(0,r.kt)("h4",{id:"arguments"},"Arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'--source-file="{source_file_path}" \n--output-cache-file="{file_out_path}" \n--return-data-file="{data_json_file}"\n')))))}f.isMDXComponent=!0},2209:function(e,t,n){t.Z=n.p+"assets/images/import_config-14b96ba794daac45fb156c146e05caed.png"},7607:function(e,t,n){t.Z=n.p+"assets/images/external_worker_processor_script-c212e5b688f43e07d954752e5e70fe42.png"}}]);