"use strict";(self.webpackChunkunmanic_documentation=self.webpackChunkunmanic_documentation||[]).push([[8662],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>h});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),u=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(t),m=i,h=p["".concat(s,".").concat(m)]||p[m]||d[m]||a;return t?r.createElement(h,o(o({ref:n},c),{},{components:t})):r.createElement(h,o({ref:n},c))}));function h(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[p]="string"==typeof e?e:i,o[1]=l;for(var u=2;u<a;u++)o[u]=t[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},5162:(e,n,t)=>{t.d(n,{Z:()=>o});var r=t(7294),i=t(6010);const a="tabItem_Ymn6";function o(e){let{children:n,hidden:t,className:o}=e;return r.createElement("div",{role:"tabpanel",className:(0,i.Z)(a,o),hidden:t},n)}},5488:(e,n,t)=>{t.d(n,{Z:()=>m});var r=t(7462),i=t(7294),a=t(6010),o=t(2389),l=t(7392),s=t(7094),u=t(2466);const c="tabList__CuJ",p="tabItem_LNqP";function d(e){const{lazy:n,block:t,defaultValue:o,values:d,groupId:m,className:h}=e,f=i.Children.map(e.children,(e=>{if((0,i.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),v=d??f.map((e=>{let{props:{value:n,label:t,attributes:r}}=e;return{value:n,label:t,attributes:r}})),I=(0,l.l)(v,((e,n)=>e.value===n.value));if(I.length>0)throw new Error(`Docusaurus error: Duplicate values "${I.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const g=null===o?o:o??f.find((e=>e.props.default))?.props.value??f[0].props.value;if(null!==g&&!v.some((e=>e.value===g)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${g}" but none of its children has the corresponding value. Available values are: ${v.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:k,setTabGroupChoices:b}=(0,s.U)(),[y,D]=(0,i.useState)(g),N=[],{blockElementScrollPositionUntilNextRender:_}=(0,u.o5)();if(null!=m){const e=k[m];null!=e&&e!==y&&v.some((n=>n.value===e))&&D(e)}const w=e=>{const n=e.currentTarget,t=N.indexOf(n),r=v[t].value;r!==y&&(_(n),D(r),null!=m&&b(m,String(r)))},E=e=>{let n=null;switch(e.key){case"Enter":w(e);break;case"ArrowRight":{const t=N.indexOf(e.currentTarget)+1;n=N[t]??N[0];break}case"ArrowLeft":{const t=N.indexOf(e.currentTarget)-1;n=N[t]??N[N.length-1];break}}n?.focus()};return i.createElement("div",{className:(0,a.Z)("tabs-container",c)},i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":t},h)},v.map((e=>{let{value:n,label:t,attributes:o}=e;return i.createElement("li",(0,r.Z)({role:"tab",tabIndex:y===n?0:-1,"aria-selected":y===n,key:n,ref:e=>N.push(e),onKeyDown:E,onClick:w},o,{className:(0,a.Z)("tabs__item",p,o?.className,{"tabs__item--active":y===n})}),t??n)}))),n?(0,i.cloneElement)(f.filter((e=>e.props.value===y))[0],{className:"margin-top--md"}):i.createElement("div",{className:"margin-top--md"},f.map(((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==y})))))}function m(e){const n=(0,o.Z)();return i.createElement(d,(0,r.Z)({key:String(n)},e))}},4954:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>l,metadata:()=>u,toc:()=>p});var r=t(7462),i=(t(7294),t(3905)),a=t(5488),o=t(5162);const l={title:"NVIDIA Hardware Acceleration on Linux",description:"NVIDIA Hardware Acceleration on Linux",id:"nvidia_support_unmanic_on_linux"},s=void 0,u={unversionedId:"guides/nvidia_support_unmanic_on_linux",id:"guides/nvidia_support_unmanic_on_linux",title:"NVIDIA Hardware Acceleration on Linux",description:"NVIDIA Hardware Acceleration on Linux",source:"@site/docs/guides/nvidia_support_unmanic_on_linux.md",sourceDirName:"guides",slug:"/guides/nvidia_support_unmanic_on_linux",permalink:"/docs/guides/nvidia_support_unmanic_on_linux",draft:!1,tags:[],version:"current",frontMatter:{title:"NVIDIA Hardware Acceleration on Linux",description:"NVIDIA Hardware Acceleration on Linux",id:"nvidia_support_unmanic_on_linux"},sidebar:"docs",previous:{title:"Linking Unmanic Installations",permalink:"/docs/guides/unmanic_link_installations"},next:{title:"Running a FileBot Post-processor",permalink:"/docs/guides/filebot_post_processor"}},c={},p=[{value:"Instructions:",id:"instructions",level:2},{value:"1) Check GPU Support",id:"1-check-gpu-support",level:3},{value:"2) Install GPU Driver",id:"2-install-gpu-driver",level:3},{value:"3) FFmpeg installation with NVENC support",id:"3-ffmpeg-installation-with-nvenc-support",level:3},{value:"4) Running in Docker with NVENC support",id:"4-running-in-docker-with-nvenc-support",level:3},{value:"Installing the NVIDIA Container Toolkit",id:"installing-the-nvidia-container-toolkit",level:4},{value:"Creating the Docker container",id:"creating-the-docker-container",level:4}],d={toc:p};function m(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://img.shields.io/badge/Difficulty-easy-green?style=flat",alt:"Difficulty"}),"\n",(0,i.kt)("img",{parentName:"p",src:"https://img.shields.io/badge/Setup%20Time-5%20minutes-green?style=flat",alt:"Setup Time"})),(0,i.kt)("p",null,"A number of plugins for Unmanic support hardware acceleration that utilise an NVIDIA GPU. This includes hardware acceleration (HWA) of video decoding/encoding in tools like FFmpeg or HandBrake CLI using the NVIDIA NVDEC/NVENC decoder/encoder."),(0,i.kt)("p",null,"Follow these instructions to configure the Unmanic Docker container for running FileBot as a Post-processor function."),(0,i.kt)("h2",{id:"instructions"},"Instructions:"),(0,i.kt)("h3",{id:"1-check-gpu-support"},"1) Check GPU Support"),(0,i.kt)("p",null,"You can find an official list of NVIDIA Graphics Cards and their supported codecs ",(0,i.kt)("a",{parentName:"p",href:"https://developer.nvidia.com/video-encode-and-decode-gpu-support-matrix-new"},"Here"),"."),(0,i.kt)("p",null,"Check that your GPU is listed and is capable of doing what you want it to."),(0,i.kt)("h3",{id:"2-install-gpu-driver"},"2) Install GPU Driver"),(0,i.kt)("p",null,"Ensure you have installed the NVIDIA drivers."),(0,i.kt)("p",null,"This is required even if you intend to run Unmanic within a Docker container."),(0,i.kt)("p",null,"You can download the latest NVIDIA GPU driver from ",(0,i.kt)("a",{parentName:"p",href:"https://www.nvidia.com/Download/driverResults.aspx/187162/en-us"},"here"),"."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"The minimum required NVIDIA driver version is 418.30 for this to work in Linux.")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"It is recommended to also patch drivers the drivers by following the instructions ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/keylase/nvidia-patch"},"here"),". This project will remove the restriction on maximum number of simultaneous NVENC video encoding sessions imposed by Nvidia to consumer-grade GPUs.")),(0,i.kt)("h3",{id:"3-ffmpeg-installation-with-nvenc-support"},"3) FFmpeg installation with NVENC support"),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Only worry about this if you are running Unmanic natively on Linux.\nThe Docker image has FFmpeg pre-installed with support for NVENC/NVDEC")),(0,i.kt)("p",null,"Install FFmpeg for your operating system."),(0,i.kt)("p",null,"It is recommend to use the ",(0,i.kt)("a",{parentName:"p",href:"https://jellyfin.org/docs/general/administration/installing.html#ffmpeg-installation"},"Jellyfin FFmpeg builds"),", however any recent release of FFmpeg will work fine."),(0,i.kt)("p",null,"To ensure your FFmpeg installation is capable of running the NVENC encoders, run this command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'for i in encoders decoders filters; do echo $i:; ffmpeg -hide_banner -${i} | egrep -i "npp|cuvid|nvenc|cuda|nvdec"; done\n')),(0,i.kt)("p",null,"You should see a list of available encoders and decoders."),(0,i.kt)("h3",{id:"4-running-in-docker-with-nvenc-support"},"4) Running in Docker with NVENC support"),(0,i.kt)("h4",{id:"installing-the-nvidia-container-toolkit"},"Installing the NVIDIA Container Toolkit"),(0,i.kt)("p",null,"If you intend to use Unmanic inside a Docker container, you will also need to pass through the required devices to the container.\nWith NVIDIA this is done by installing the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html#docker"},"nvidia-docker2")," package\non your host."),(0,i.kt)("p",null,"Once you have followed these steps, you can test that the Unmanic Docker container can use the NVENC hardware by running:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'docker run --rm --gpus all --entrypoint="" josh5/unmanic nvidia-smi\n')),(0,i.kt)("p",null,"You should see the following output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Sun Apr 17 05:31:44 2022       \n+-----------------------------------------------------------------------------+\n| NVIDIA-SMI 510.54       Driver Version: 510.54       CUDA Version: 11.6     |\n|-------------------------------+----------------------+----------------------+\n| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n|                               |                      |               MIG M. |\n|===============================+======================+======================|\n|   0  NVIDIA GeForce ...  Off  | 00000000:01:00.0  On |                  N/A |\n|  0%   34C    P8    N/A / 120W |    185MiB /  4096MiB |      0%      Default |\n|                               |                      |                  N/A |\n+-------------------------------+----------------------+----------------------+\n                                                                               \n+-----------------------------------------------------------------------------+\n| Processes:                                                                  |\n|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\n|        ID   ID                                                   Usage      |\n|=============================================================================|\n|  No running processes found                                                 |\n+-----------------------------------------------------------------------------+\n")),(0,i.kt)("h4",{id:"creating-the-docker-container"},"Creating the Docker container"),(0,i.kt)(a.Z,{defaultValue:"docker_run",values:[{label:"Docker run",value:"docker_run"},{label:"Docker-compose",value:"docker_compose"}],mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"docker_run",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"  PUID=$(id -u)\n  PGID=$(id -g)\n\n  # CONFIG_DIR - Where you settings are saved\n  CONFIG_DIR=/config\n\n  # LIBRARY_DIR - The location/locations of your library\n  LIBRARY_DIR=/library\n\n  # CACHE_DIR - A tmpfs or and folder for temporary conversion files\n  CACHE_DIR=/tmp/unmanic\n  \n  # NVIDIA_VISIBLE_DEVICES - The GPUs that will be accessible to the container\n  NVIDIA_VISIBLE_DEVICES=all\n\n  docker run -ti --rm \\\n      -e PUID=${PUID} \\\n      -e PGID=${PGID} \\\n      -e NVIDIA_VISIBLE_DEVICES=${NVIDIA_VISIBLE_DEVICES} \\\n      --runtime=nvidia \\\n      -p 8888:8888 \\\n      -v ${CONFIG_DIR}:/config \\\n      -v ${LIBRARY_DIR}:/library \\\n      -v ${CACHE_DIR}:/tmp/unmanic \\\n      josh5/unmanic:latest\n"))),(0,i.kt)(o.Z,{value:"docker_compose",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"  # Variables that will need to be changed:\n  #     <PUID>                            -  User id for folder/file permissions\n  #     <PGID>                            -  Group id for folder/file permissions\n  #     <NVIDIA_VISIBLE_DEVICES>          -  The GPUs that will be accessible to the container\n  #                                          Options: https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/user-guide.html#gpu-enumeration\n  #     <PATH_TO_CONFIG>                  -  Path where Unmanic will store config files\n  #     <PATH_TO_LIBRARY>                 -  Path where you store the files that Unmanic will scan\n  #     <PATH_TO_ENCODE_CACHE>            -  Cache path for in-progress encoding tasks\n  #\n\n  ---\n  version: '2.4'\n  services:\n    unmanic:\n      container_name: unmanic\n      image: josh5/unmanic:latest\n      ports:\n        - 8888:8888\n      environment:\n        - PUID=<PUID>\n        - PGID=<PGID>\n        - NVIDIA_VISIBLE_DEVICES=<NVIDIA_VISIBLE_DEVICES>\n      volumes:\n        - <PATH_TO_CONFIG>:/config\n        - <PATH_TO_LIBRARY>:/library\n        - <PATH_TO_ENCODE_CACHE>:/tmp/unmanic\n      runtime: nvidia       # For H/W transcoding using the NVENC encoder\n")))))}m.isMDXComponent=!0}}]);